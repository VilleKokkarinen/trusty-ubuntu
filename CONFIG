using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.Diagnostics;

using System.Collections.Specialized;
using System.IO;


namespace DatabaseConnection
{
	public class Config
	{
		//Strings, ints, list
		static string directory						= AppDomain.CurrentDomain.BaseDirectory;
		static string UseConfig 					= "";
		static string configUseConnectionString 	= "";
		static string configPath 					= "";
		static string configFilename				= "";

		static string configConnectionString 		= "";
		static string configDatabases 				= "";
		static string configAddDates 				= "";
		static string configMultiFile 				= "";

		static List <string> configDBS = new List<string>();

		//Type 1 = SQL
		//Type 2 = Firebird
		static int type = 0;
	
		private static void METHOD()
		{
			
			char Delimiter  = ' ';
			char Delimiter2 = '=';
			string configfile 	= directory + "/" +"Config.txt";

			string line;
			using (StreamReader file = new StreamReader (configfile)) {

				while ((line = file.ReadLine ()) != null) {

					if (line.Contains ("SQL=")) {
						try {
							line = line.ToUpper ();
							string a = line.Split(Delimiter2)[1];
							if(a.Contains(" "))
								{
								a = a.Split(Delimiter)[1];
								}

							if (a == "TRUE" ){type = 1;}
							if (a == "FALSE"){type = 2;}

						} catch (Exception) {
						}

					}

					if (line.Contains ("UseConfig=")) {
						try {
							line = line.ToUpper ();

							string a = line.Split(Delimiter2)[1];
							if(a.Contains(" "))
							{
								a = a.Split(Delimiter)[1];
							}
							UseConfig = a;

						} catch (Exception) {
						}

					}

					if (line.Contains ("Path=")) {
						try {							
							string a = line.Split(Delimiter2)[1];
							if(a.Contains(" "))
							{
								a = a.Split(Delimiter)[1];
							}
							configPath = a;
						}catch(Exception){
						}

					}

					if (line.Contains ("Filename=")) {
						try {
							string a = line.Split(Delimiter2)[1];
							if(a.Contains(" "))
							{
								a = a.Split(Delimiter)[1];
							}
							configFilename = a;

						} catch (Exception) {
						}


					}

					if (line.Contains ("UsePremadeConnectionString=")) {
						try {
							line = line.ToUpper ();

							string a = line.Split(Delimiter2)[1];
							if(a.Contains(" "))
							{
								a = a.Split(Delimiter)[1];
							}
							configUseConnectionString = a;

						} catch (Exception) {
						}

					}
					if (line.Contains ("Connectionstring=\"")) {
						try {
							if(configUseConnectionString == "TRUE"){
							configConnectionString = line;
							configConnectionString = configConnectionString.Substring(18,configConnectionString.Length-19);
							}else
							{
								configConnectionString = "";
							}
						} catch (Exception) {
							Console.WriteLine ("Error with the Connectionstring-Name. Check your config");
						}

					}

					if (line.Contains ("Databases=")) {
						try {
							line = line.ToUpper ();

							string a = line.Split(Delimiter2)[1];
							if(a.Contains(" "))
							{
								a = a.Split(Delimiter)[1];
							}
							configDatabases = a;

						} catch (Exception) {
						}
					}

					if (line.Contains ("MultipleFiles=")) {
						try {
							line = line.ToUpper ();

							string a = line.Split(Delimiter2)[1];
							if(a.Contains(" "))
							{
								a = a.Split(Delimiter)[1];
							}
							configMultiFile = a;

						} catch (Exception) {
						}


					}

					if (line.Contains ("AddDates=")) {
						try {
							line = line.ToUpper ();
							string a = line.Split(Delimiter2)[1];
							if(a.Contains(" "))
							{
								a = a.Split(Delimiter)[1];
							}
							configAddDates = a;

						} catch (Exception) {
						}
					}
				}
			}
		}



		//Checks whether or not to use Databases from the Databases.txt File
		private static void cfgDATABASES ()
		{	
			if (configDatabases == "*ALL*") {

				SqlConnection AllDbs = new SqlConnection (configConnectionString);
				AllDbs.Open ();

				SqlCommand DBNames = new SqlCommand ("SELECT name from sys.sysdatabases WHERE HAS_DBACCESS(name) = 1", AllDbs);
				SqlDataReader DBreader = DBNames.ExecuteReader ();
				while (DBreader.Read ()) {					
					configDBS.Add (DBreader ["name"].ToString ());
				}
				DBreader.Close ();
				AllDbs.Close ();		
			}


			if (configDatabases == "TRUE") {
				try{
				string dbfile = directory + "/" +"Databases.txt";
				string[] DBS = System.IO.File.ReadAllLines(dbfile);
				
				foreach (string db in DBS) {
					configDBS.Add (db.ToString ());					
				}	
				}catch(Exception){
					System.IO.File.WriteAllText (directory + "/Databases.txt","");
					Console.WriteLine ("Could not find Databases.txt File. Created one at: " + directory);
					Console.WriteLine ("Press any key to exit");
					Console.ReadKey ();
					System.Environment.Exit (0);
				}
			} 
		}

		//If the program couldn't find a config file, this creates a new one, at the directory of the program
		private static void Configfile()
		{
			string cfgFile = "";

	  cfgFile = "ï»¿config file, Edit each Line after the character \"=\",REMEMBER NOT TO add a space between the question and the \"=\" \n" +
				"//Example of a method filled the right way: USECONFIG=TRUE\n" +
				"\n" +
				"\n" +
				"//true=Uses this Config file\n" +
				"//false=doesn't\n" +
				"UseConfig=false\n" +
				"\n" +
				"\n" +
				"//true=uses SQL\n" +
				"//false=uses Firebird\n" +
				"SQL=true\n" +
				"\n" +
				"\n" +
				"//Path for the file [Default: /home/[Your_Username]/Documents]\n" +
				"//Name for the file\n" +
				"Path=/home/user/Desktop\n" +
				"Filename=File.csv\n" +
				"\n" +
				"\n" +
				"//true = uses premade connection defined below [SQL : \"User ID=sa;Password=admin;Server=192.168.0.0;\"]\n" +
				"//false = asks required information on startup [FBD : \"User ID=sysdba;Password=admin;Database=192.168.0.0:X:/Folder/DBname.fdb;DataSource=192.168.0.0;\"]\n" +
				"UsePremadeConnectionString=true\n" +
				"Connectionstring=\"User ID=sa;Password=admin;Server=192.168.0.0;\"\n" +
				"\n" +
				"\n" +
				"//true= uses databasenames found from the \"Databases.txt\" file\n" +
				"//false= asks names on startup\n" +
				"//*ALL* Chooses All found Databases from the connection\n" +
				"Databases=false\n" +
				"\n" +
				"// ^ ! Each database on a new line ! ^\n" +
				"\n" +
				"\n" +
				"//true Creates a different file for every database *Renames the file as the database. Regardless of option above\n" +
				"//false Creates 1 big file, with all databases in it\n" +
				"MultipleFiles=true\n" +
				"\n" +
				"\n" +
				"//true Adds the current system date (DD/MM/YY), to the filename, eg. (DB_04-05-17)\n" +
				"//false Doesn't\n" +
				"AddDates=true\n" +
				"\n" +
				"\n" +
				"//IF you've lost your [Databases.txt] file, Just manually create one at the same directory where THIS config.txt is in\n" +
				"//Name it exactly: Databases.txt";

				System.IO.File.WriteAllText (directory + "/Config.txt", cfgFile);
				Console.WriteLine ("Couldn't find a config file, created a new one at: " + directory);	
				Console.WriteLine ("Please restart the program");
		}



		//chekcs whether or not to use the config, or skip it
		public static void USECONFIG ()
		{
			try{
			METHOD ();
			}catch(Exception){
				Configfile ();
				System.Environment.Exit (0);
			}
			cfgDATABASES ();

			if (UseConfig == "FALSE")
			{
				DatabaseConnection.DBTYPE.DBSelection ();
			}				
			if (UseConfig == "TRUE")
			{				
				Start ();
			}
			if (UseConfig != "TRUE" && UseConfig != "FALSE" ||
				type != 1 && type != 2 || 
				configUseConnectionString != "TRUE" && configUseConnectionString != "FALSE" ||
				configDatabases != "TRUE" && configDatabases != "FALSE" && configDatabases != "*ALL*" ||
				configMultiFile != "TRUE" && configMultiFile != "FALSE" ||
				configAddDates  != "TRUE" && configAddDates  != "FALSE" )
			{				
				//Do something to tell user their choice is incorrect
				Console.Write("Possible Typos in config, Please re-check config.txt");
				System.Environment.Exit (0);
			}
		}


		//Calls all the methods in this class, empties values afterwards
		private static void Start()
		{
			DatabaseConnection.DBTYPEconfig.DBSelectionconfig (configDBS, type,configPath,configFilename,configConnectionString,configDatabases,configMultiFile,configAddDates);

			//Null every option
			directory 					= "";
			UseConfig 					= "";
			configPath					= "";
			configFilename 				= "";
			configUseConnectionString 	= "";
			configConnectionString 		= "";
			configDatabases 			= "";
			configAddDates 				= "";
			configMultiFile 			= "";
			type 						= 0;
			configDBS.Clear ();
		}
	}
}
